import os
import json
import random
import re
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users_data.json"
TIME_FILE = "farm_time.json"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
            print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ users_data.json")
            return {}
    return {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Å—É —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è
def load_farm_time():
    if os.path.exists(TIME_FILE):
        with open(TIME_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è
def save_farm_time(farm_time):
    with open(TIME_FILE, "w", encoding="utf-8") as file:
        json.dump(farm_time, file, indent=4)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("/start"), KeyboardButton("/status"))
    keyboard.add(KeyboardButton("/boost"))  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    return keyboard

# –ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {"marshmallows": 0, "level": 1}  # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —Ä—ñ–≤–µ–Ω—å 1

        marshmallows = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–µ—Ñ—ñ—Ä–æ–∫, —â–æ –æ—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        data[user_id]["marshmallows"] += marshmallows  # –î–æ–¥–∞—î–º–æ –∑–µ—Ñ—ñ—Ä–∫–∏
        save_data(data)

        level = data[user_id]["level"]
        await message.reply(f"üéâ –¢—ã –Ω–∞—á–∞–ª –∏–≥—Ä—É! –£ —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å: {level}. –¢—ã –ø–æ–ª—É—á–∏–ª {marshmallows} –∑–µ—Ñ–∏—Ä–æ–∫. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[user_id]['marshmallows']} üç¨", reply_markup=get_main_menu())
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –≥—Ä—ñ, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ä—Ç
        await message.reply(f"üìù –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {data[user_id]['level']}. –£ —Ç–µ–±—è {data[user_id]['marshmallows']} –∑–µ—Ñ–∏—Ä–æ–∫ üç¨.", reply_markup=get_main_menu())

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–µ—Ñ—ñ—Ä–æ–∫
@dp.message_handler(commands=['status'])
async def status_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    count = data.get(user_id, {}).get("marshmallows", 0)
    level = data.get(user_id, {}).get("level", 1)
    await message.reply(f"üìä –°—Ç–∞—Ç—É—Å: –£ —Ç–µ–±—è {count} –∑–µ—Ñ–∏—Ä–æ–∫ üç¨ –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}.", reply_markup=get_main_menu())

# –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
@dp.message_handler(commands=['boost'])
async def boost_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id in data:
        if data[user_id]["marshmallows"] >= 10:  # –ü–ª–∞—Ç–∞ –∑–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
            data[user_id]["marshmallows"] -= 10  # –ó–Ω—ñ–º–∞—î–º–æ 10 –∑–µ—Ñ—ñ—Ä–æ–∫
            data[user_id]["level"] += 1  # –ü—ñ–¥–≤–∏—â—É—î–º–æ —Ä—ñ–≤–µ–Ω—å
            save_data(data)
            await message.reply(f"üéâ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {data[user_id]['level']}. –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª 10 –∑–µ—Ñ–∏—Ä–æ–∫. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[user_id]['marshmallows']} –∑–µ—Ñ–∏—Ä–æ–∫.", reply_markup=get_main_menu())
        else:
            await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–µ—Ñ–∏—Ä–æ–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è. –ù—É–∂–Ω–æ 10 –∑–µ—Ñ–∏—Ä–æ–∫.", reply_markup=get_main_menu())
    else:
        await message.reply("‚ùå –¢—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü—ñ—è —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è –∑–µ—Ñ—ñ—Ä–æ–∫
@dp.message_handler(commands=['farm'])
async def farm_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    farm_time = load_farm_time()

    if user_id not in data:
        await message.reply("‚ùå –¢—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=get_main_menu())
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è
    last_farm_time = farm_time.get(user_id, 0)
    current_time = int(time.time())

    if current_time - last_farm_time < 300:  # 5 —Ö–≤–∏–ª–∏–Ω
        await message.reply(f"‚ùå –¢—ã –º–æ–∂–µ—à—å —Ñ–∞—Ä–º–∏—Ç—å –∑–µ—Ñ–∏—Ä–∫–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —á–µ—Ä–µ–∑ {300 - (current_time - last_farm_time)} —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_menu())
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞, —è–∫–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –≤–≥–∞–¥–∞—Ç–∏
    random_number = random.randint(1, 10)
    farm_time[user_id] = current_time
    save_farm_time(farm_time)

    # –ü—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
    await message.reply(f"üí¨ –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–µ—Ñ–∏—Ä–∫–∏.", reply_markup=get_main_menu())

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    farm_time[user_id] = {"number": random_number}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ñ–∞—Ä–º–ª–µ–Ω–Ω—è
@dp.message_handler()
async def check_farm_answer(message: Message):
    user_id = str(message.from_user.id)
    farm_time = load_farm_time()

    if user_id in farm_time and "number" in farm_time[user_id]:
        correct_number = farm_time[user_id]["number"]
        if message.text.isdigit() and int(message.text) == correct_number:
            # –î–æ–¥–∞—î–º–æ –∑–µ—Ñ—ñ—Ä–∫–∏
            data = load_data()
            data[user_id]["marshmallows"] += random.randint(5, 20)  # –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–µ—Ñ—ñ—Ä–æ–∫
            save_data(data)
            await message.reply(f"üéâ –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ! –¢—ã –ø–æ–ª—É—á–∏–ª –∑–µ—Ñ–∏—Ä–∫–∏! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[user_id]['marshmallows']} –∑–µ—Ñ–∏—Ä–æ–∫.", reply_markup=get_main_menu())
        else:
            await message.reply(f"‚ùå –¢—ã –Ω–µ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª {correct_number}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.", reply_markup=get_main_menu())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(commands=['stats'])
async def stats_cmd(message: Message):
    data = load_data()
    stats = "\n".join([f"{i+1}. {user}: {data[user]['marshmallows']} üç¨ –∑–µ—Ñ–∏—Ä–æ–∫" for i, user in enumerate(data)])
    await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats}", reply_markup=get_main_menu())

# –ú–µ–Ω—é
@dp.message_handler(commands=['menu'])
async def menu_cmd(message: Message):
    await message.reply(
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/status ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "/stats ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/boost ‚Äî –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Å–Ω–∏–º–∞–µ—Ç 10 –∑–µ—Ñ–∏—Ä–æ–∫)\n"
        "/farm ‚Äî –§–∞—Ä–º–∏—Ç–µ –∑–µ—Ñ–∏—Ä–∫–∏\n"
        "/menu ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
@dp.message_handler(content_types=['text'])
async def check_message(message: Message):
    # –¢—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è, –º–∏ –Ω–µ –±—É–¥–µ–º–æ –±–ª–æ–∫—É–≤–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
    # –í—Å—ñ —Ç–µ–∫—Å—Ç–∏, –Ω–∞–ø–∏—Å–∞–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —Ç–∞–∫–æ–∂ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
