import os
import json
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users_data.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
            print("–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª—ñ users_data.json")
            return {}
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
def contains_ukrainian(text):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏
    return bool(re.search('[–∞-—è–ê-–Ø—ñ—ó—î“ë]', text)) and not bool(re.search('[—ë–Å]', text))

# –ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        data[user_id] = {"marshmallows": 1}  # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º—É—î 1 –∑–µ—Ñ—ñ—Ä
    else:
        data[user_id]["marshmallows"] += 1  # –î–æ–¥–∞—î–º–æ –∑–µ—Ñ—ñ—Ä

    save_data(data)
    await message.reply(f"üéâ –¢—ã –Ω–∞—á–∞–ª –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏–ª –∑–µ—Ñ–∏—Ä! –£ —Ç–µ–±—è —É–∂–µ {data[user_id]['marshmallows']} üç¨")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–µ—Ñ—ñ—Ä—ñ–≤
@dp.message_handler(commands=['status'])
async def status_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    count = data.get(user_id, {}).get("marshmallows", 0)
    await message.reply(f"üìä –£ —Ç–µ–±—è {count} –∑–µ—Ñ–∏—Ä–æ–≤ üç¨")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
@dp.message_handler(content_types=['text'])
async def check_message(message: Message):
    if contains_ukrainian(message.text):
        await message.reply("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–π.")
        return

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
