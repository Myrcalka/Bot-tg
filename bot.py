import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users_data.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)

# –ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        data[user_id] = {"marshmallows": 1}  # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º—É—î 1 –∑–µ—Ñ—ñ—Ä
    else:
        data[user_id]["marshmallows"] += 1  # –î–æ–¥–∞—î–º–æ –∑–µ—Ñ—ñ—Ä

    save_data(data)
    await message.reply(f"üéâ –¢–∏ –ø–æ—á–∞–≤ –≥—Ä—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–≤ –∑–µ—Ñ—ñ—Ä! –£ —Ç–µ–±–µ –≤–∂–µ {data[user_id]['marshmallows']} üç¨")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–µ—Ñ—ñ—Ä—ñ–≤
@dp.message_handler(commands=['status'])
async def status_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    count = data.get(user_id, {}).get("marshmallows", 0)
    await message.reply(f"üìä –£ —Ç–µ–±–µ {count} –∑–µ—Ñ—ñ—Ä—ñ–≤ üç¨")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
