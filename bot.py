import os
import json
import random
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users_data.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫
            print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ users_data.json")
            return {}
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–µ—Ñ—ñ—Ä—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è
def get_marshmallows(level):
    return random.randint(1, level * 3)  # –†–∞–Ω–¥–æ–º–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–µ—Ñ—ñ—Ä—ñ–≤ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä—ñ–≤–Ω—è

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("/start"), KeyboardButton("/status"))
    keyboard.add(KeyboardButton("/stats"), KeyboardButton("/menu"))
    keyboard.add(KeyboardButton("/boost"))  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    return keyboard

# –ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        data[user_id] = {"marshmallows": 0, "level": 1}  # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —Ä—ñ–≤–µ–Ω—å 1
    else:
        data[user_id]["level"] += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É

    level = data[user_id]["level"]
    marshmallows = get_marshmallows(level)
    data[user_id]["marshmallows"] += marshmallows  # –î–æ–¥–∞—î–º–æ –∑–µ—Ñ—ñ—Ä–∫–∏

    save_data(data)
    await message.reply(f"üéâ –¢—ã –Ω–∞—á–∞–ª –∏–≥—Ä—É! –£ —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å: {level}. –¢—ã –ø–æ–ª—É—á–∏–ª {marshmallows} –∑–µ—Ñ–∏—Ä–æ–∫. –í —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–µ–ø–µ—Ä—å {data[user_id]['marshmallows']} üç¨", reply_markup=get_main_menu())

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–µ—Ñ—ñ—Ä—ñ–≤
@dp.message_handler(commands=['status'])
async def status_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    count = data.get(user_id, {}).get("marshmallows", 0)
    level = data.get(user_id, {}).get("level", 1)
    await message.reply(f"üìä –°—Ç–∞—Ç—É—Å: –£ —Ç–µ–±—è {count} –∑–µ—Ñ–∏—Ä–æ–∫ üç¨ –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}.", reply_markup=get_main_menu())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(commands=['stats'])
async def stats_cmd(message: Message):
    data = load_data()
    total_users = len(data)
    total_marshmallows = sum(user_data["marshmallows"] for user_data in data.values())
    total_levels = sum(user_data["level"] for user_data in data.values())
    
    await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" 
                        f"üîπ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"üîπ –û–±—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ—Ñ–∏—Ä–æ–∫: {total_marshmallows} üç¨\n"
                        f"üîπ –°—É–º–º–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π: {total_levels}", reply_markup=get_main_menu())

# –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
@dp.message_handler(commands=['boost'])
async def boost_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id in data:
        # –ü—ñ–¥–≤–∏—â—É—î–º–æ —Ä—ñ–≤–µ–Ω—å
        data[user_id]["level"] += 1
        save_data(data)
        await message.reply(f"üéâ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1! –°–µ–π—á–∞—Å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {data[user_id]['level']}.", reply_markup=get_main_menu())
    else:
        await message.reply("‚ùå –¢—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=get_main_menu())

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@dp.message_handler(commands=['hello'])
async def hello_cmd(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–π –∏–≥—Ä–µ! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!", reply_markup=get_main_menu())

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
@dp.message_handler(commands=['random'])
async def random_cmd(message: Message):
    rand_num = random.randint(1, 100)
    await message.reply(f"üé≤ –¢–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {rand_num}", reply_markup=get_main_menu())

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–µ—Ñ—ñ—Ä—ñ–≤
@dp.message_handler(commands=['add_marshmallow'])
async def add_marshmallow_cmd(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id in data:
        data[user_id]["marshmallows"] += 5  # –î–æ–¥–∞—î–º–æ 5 –∑–µ—Ñ—ñ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        save_data(data)
        await message.reply(f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª 5 –∑–µ—Ñ–∏—Ä–æ–∫! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {data[user_id]['marshmallows']} üç¨", reply_markup=get_main_menu())
    else:
        await message.reply("‚ùå –¢—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", reply_markup=get_main_menu())

# –ü–æ–∫–∞–∂–µ–º–æ –º–µ–Ω—é –∑ —É—Å—ñ–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏
@dp.message_handler(commands=['menu'])
async def menu_cmd(message: Message):
    await message.reply(
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/status ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "/stats ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/boost ‚Äî –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å\n"
        "/random ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n"
        "/add_marshmallow ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–µ—Ñ–∏—Ä\n"
        "/hello ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/menu ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
@dp.message_handler(content_types=['text'])
async def check_message(message: Message):
    if contains_ukrainian(message.text):
        await message.reply("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–π.")
        return

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
